from signalfx.detectors.rum import utils as rum_utils

KIND_FILTER = filter('kind', 'CONSUMER') or filter('kind', 'SERVER')
V2_KIND_FILTER = filter('sf_kind', 'CONSUMER') or filter('sf_kind',
                                                         'SERVER')  # added for completeness

EXCLUDE_CUSTOM_DIMS_FILTER = not filter('sf_dimensionalized', 'true')

ERROR_TRUE = filter('error', 'true')
ERROR_FALSE = filter('error', 'false')

V2_ERROR_TRUE = filter('sf_error', 'true')
V2_ERROR_FALSE = filter('sf_error', 'false')

EXCLUDE_ERRORS_FILTER = not ERROR_TRUE
V2_EXCLUDE_ERRORS_FILTER = not V2_ERROR_TRUE

DEFAULT_GROUPBY = ['cluster', 'service', 'operation', 'httpMethod', 'kind']
V2_DEFAULT_GROUPBY = ['sf_environment', 'sf_service', 'sf_operation', 'sf_httpMethod', 'sf_kind']

DEFAULT_ALLOW_MISSING = ['cluster', 'service', 'operation', 'httpMethod', 'kind']
V2_DEFAULT_ALLOW_MISSING = ['sf_environment', 'sf_service', 'sf_operation', 'sf_httpMethod',
                            'sf_kind']

PCTILE_TO_METRIC = {'count': 'spans.count',
                    50: 'spans.duration.ns.median',
                    90: 'spans.duration.ns.p90',
                    99: 'spans.duration.ns.p99'}

V2_DATA_RESOLUTION_TEN_SECONDS = 10000

RESOURCE_TYPE_MAPPING = {
    'service_operation': {'metric_names': PCTILE_TO_METRIC,
                          'group_by': V2_DEFAULT_GROUPBY,
                          'allow_missing': V2_DEFAULT_ALLOW_MISSING,
                          'error': {'true': V2_ERROR_TRUE,
                                    'false': V2_ERROR_FALSE}},
    'service': {'metric_names': {'count': 'service.request.count',
                                 50: 'service.request.duration.ns.median',
                                 90: 'service.request.duration.ns.p90',
                                 99: 'service.request.duration.ns.p99'},
                'group_by': ['sf_environment', 'sf_service'],
                'allow_missing': ['sf_environment', 'sf_service'],
                'error': {'true': V2_ERROR_TRUE,
                          'false': V2_ERROR_FALSE}},
    'workflow': {'metric_names': {'count': 'workflows.count',
                                  50: 'workflows.duration.ns.median',
                                  90: 'workflows.duration.ns.p90',
                                  99: 'workflows.duration.ns.p99'},
                 'group_by': ['sf_environment', 'sf_workflow'],
                 'allow_missing': ['sf_environment', 'sf_workflow'],
                 'error': {'true': V2_ERROR_TRUE,
                           'false': V2_ERROR_FALSE}},
    rum_utils.WORKFLOW_KEY: rum_utils.WORKFLOW_VALUE,
    rum_utils.WORKFLOW_NODE_KEY: rum_utils.WORKFLOW_NODE_VALUE,
    rum_utils.RESOURCE_REQUEST_KEY: rum_utils.RESOURCE_REQUEST_VALUE,
    rum_utils.RESOURCE_REQUEST_NODE_KEY: rum_utils.RESOURCE_REQUEST_NODE_VALUE,
    rum_utils.LONG_TASK_KEY: rum_utils.LONG_TASK_VALUE,
    rum_utils.LONG_TASK_NODE_KEY: rum_utils.LONG_TASK_NODE_VALUE,
    rum_utils.PAGE_VIEW_KEY: rum_utils.PAGE_VIEW_VALUE,
    rum_utils.PAGE_VIEW_NODE_KEY: rum_utils.PAGE_VIEW_NODE_VALUE,
    rum_utils.CLIENT_ERROR_KEY: rum_utils.CLIENT_ERROR_VALUE,
    rum_utils.CLIENT_ERROR_NODE_KEY: rum_utils.CLIENT_ERROR_NODE_VALUE,
    rum_utils.WEBVITALS_LCP_KEY: rum_utils.WEBVITALS_LCP_VALUE,
    rum_utils.WEBVITALS_LCP_NODE_KEY: rum_utils.WEBVITALS_LCP_NODE_VALUE,
    rum_utils.WEBVITALS_FID_KEY: rum_utils.WEBVITALS_FID_VALUE,
    rum_utils.WEBVITALS_FID_NODE_KEY: rum_utils.WEBVITALS_FID_NODE_VALUE,
    rum_utils.RESOURCE_REQUEST_TTFB_KEY: rum_utils.RESOURCE_REQUEST_TTFB_VALUE,
    rum_utils.RESOURCE_REQUEST_TTFB_NODE_KEY: rum_utils.RESOURCE_REQUEST_TTFB_NODE_VALUE,
    rum_utils.CRASH_KEY: rum_utils.CRASH_VALUE,
    rum_utils.CRASH_NODE_KEY: rum_utils.CRASH_NODE_VALUE,
    rum_utils.WEBVITALS_CLS_KEY: rum_utils.WEBVITALS_CLS_VALUE,
    rum_utils.WEBVITALS_CLS_NODE_KEY: rum_utils.WEBVITALS_CLS_NODE_VALUE,
    rum_utils.HOTSTART_KEY: rum_utils.HOTSTART_VALUE,
    rum_utils.HOTSTART_NODE_KEY: rum_utils.HOTSTART_NODE_VALUE,
    rum_utils.COLDSTART_KEY: rum_utils.COLDSTART_VALUE,
    rum_utils.COLDSTART_NODE_KEY: rum_utils.COLDSTART_NODE_VALUE,
    rum_utils.WARMSTART_KEY: rum_utils.WARMSTART_VALUE,
    rum_utils.WARMSTART_NODE_KEY: rum_utils.WARMSTART_NODE_VALUE,
    rum_utils.APP_ERROR_KEY: rum_utils.APP_ERROR_VALUE,
    rum_utils.APP_ERROR_NODE_KEY: rum_utils.APP_ERROR_NODE_VALUE
}

def merge_filters(filter_, exclude_errors, use_kind_filter=True, custom_filter=None,
                  kind_filter=KIND_FILTER, exclude_errors_filter=EXCLUDE_ERRORS_FILTER):
    if custom_filter is None:
        if filter_ is not None:
            if exclude_errors is True:
                if use_kind_filter is True:
                    return filter_ and exclude_errors_filter and kind_filter and EXCLUDE_CUSTOM_DIMS_FILTER
                else:
                    return filter_ and exclude_errors_filter and EXCLUDE_CUSTOM_DIMS_FILTER
            else:
                if use_kind_filter is True:
                    return filter_ and kind_filter and EXCLUDE_CUSTOM_DIMS_FILTER
                else:
                    return filter_ and EXCLUDE_CUSTOM_DIMS_FILTER
        else:
            if exclude_errors is True:
                if use_kind_filter is True:
                    return exclude_errors_filter and kind_filter and EXCLUDE_CUSTOM_DIMS_FILTER
                else:
                    return exclude_errors_filter and EXCLUDE_CUSTOM_DIMS_FILTER
            else:
                if use_kind_filter is True:
                    return kind_filter and EXCLUDE_CUSTOM_DIMS_FILTER
                else:
                    return EXCLUDE_CUSTOM_DIMS_FILTER
    else:
        if filter_ is not None:
            if exclude_errors is True:
                if use_kind_filter is True:
                    return filter_ and exclude_errors_filter and kind_filter and custom_filter
                else:
                    return filter_ and exclude_errors_filter and custom_filter
            else:
                if use_kind_filter is True:
                    return filter_ and kind_filter and custom_filter
                else:
                    return filter_ and custom_filter
        else:
            if exclude_errors is True:
                if use_kind_filter is True:
                    return exclude_errors_filter and kind_filter and custom_filter
                else:
                    return exclude_errors_filter and custom_filter
            else:
                if use_kind_filter is True:
                    return kind_filter and custom_filter
                else:
                    return custom_filter


def merge_group_by_with_default(group_by, default=DEFAULT_GROUPBY):
    if group_by is None:
        return default
    else:
        return default + group_by
